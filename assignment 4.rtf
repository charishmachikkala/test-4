{\rtf1\ansi\ansicpg1252\deff0\nouicompat\deflang16393{\fonttbl{\f0\fnil\fcharset0 Cambria;}{\f1\fnil\fcharset1 Cambria Math;}{\f2\fnil\fcharset0 Cambria Math;}{\f3\fnil\fcharset2 Symbol;}}
{\colortbl ;\red255\green0\blue0;\red0\green176\blue80;\red0\green0\blue0;}
{\*\generator Riched20 10.0.10240}{\*\mmathPr\mmathFont1\mwrapIndent1440 }\viewkind4\uc1 
\pard\sa200\sl276\slmult1\b\f0\fs36\lang9 1. Explain the differences between Cassandra and typical databases.\par
\cf1\b0 Difference between Cassandra and RDBMS\cf0\par
\cf2 Cassandra: \cf0 Cassandra is a high-performance and highly scalable distributed NoSQL database management system. Cassandra deals with unstructured data and handles a high volume of incoming data velocity. In Cassandra data is written in many locations also data come from many locations this row represents a unit of replication and the column represents a unit of storage. \par
\cf2 RDBMS: \cf0 Relational Database Management System (RDBMS) is a Database management system or software that is designed for relational databases and uses Structured Query Language (SQL) for querying and maintaining the database. It deals with structured data and handles moderate incoming data velocity. In RDBMS mainly data is written in one location also data come from one/few locations and a row represents a single record column that represents an attribute. \par
\cf1 Difference between Cassandra and RDBMS:\par
\cf2\b Cassandara:\cf1\b0\par

\pard{\pntext\f3\'B7\tab}{\*\pn\pnlvlblt\pnf3\pnindent0{\pntxtb\'B7}}\fi-360\li720\sa200\sl276\slmult1\cf3 Cassandra is a high performance and highly scalable distributed NoSQL database management system.\par
{\pntext\f3\'B7\tab}Cassandra is a NoSQL database\par
{\pntext\f3\'B7\tab}It deals with unstructured data.\par
{\pntext\f3\'B7\tab}It has a flexible schema.\par
{\pntext\f3\'B7\tab}Cassandra has peer-to-peer architecture with no single point of failure.\par
{\pntext\f3\'B7\tab}Cassandra handles high volume incoming data velocity.\par
{\pntext\f3\'B7\tab}In RDBMS there is limited data source means data come from many locations.\par
{\pntext\f3\'B7\tab}It supports simple transactions.\par
{\pntext\f3\'B7\tab}In Cassandra the outermost container is Keyspace.\par
{\pntext\f3\'B7\tab}Cassandra follows decentralized deployments\par
{\pntext\f3\'B7\tab}In Cassandra data written in many locations.\par
{\pntext\f3\'B7\tab}In Cassandra row represents a unit of replication.\par
{\pntext\f3\'B7\tab}In Cassandra column represents a unit of storage.\par
{\pntext\f3\'B7\tab}In Cassandra, relationships are represented using collections.\par

\pard\sa200\sl276\slmult1\b 2. What exactly is CQLSH?\par
\b0 Cassandra provides a prompt Cassandra query language shell (cqlsh) that allows users to communicate with it. Using this shell, you can execute Cassandra Query Language (CQL).\par
Using cqlsh, you can\par
define a schema,\par
insert data, and\par
execute a query.\par
Starting cqlsh\par
Start cqlsh using the command cqlsh as shown below. It gives the Cassandra cqlsh prompt as output.\par
[hadoop@linux bin]$ cqlsh\par
Connected to Test Cluster at 127.0.0.1:9042.\par
[cqlsh 5.0.1 | Cassandra 2.1.2 | CQL spec 3.2.0 | Native protocol v3]\par
Use HELP for help.\par
cqlsh>\par
Cqlsh \f1\u8722?\f0  As discussed above, this command is used to start the cqlsh prompt. In addition, it supports a few more options as well. The following table explains all the options of cqlsh and their usage.\lang9\par

\pard\sa200\sl276\slmult1\cf0 Cqlsh Commands\par
Cqlsh has a few commands that allow users to interact with it. The commands are listed below.\par
Documented Shell Commands\par
Given below are the Cqlsh documented shell commands. These are the commands used to perform tasks such as displaying help topics, exit from cqlsh, describe,etc.\par
HELP \f1\u8722?\f0  Displays help topics for all cqlsh commands.\par
CAPTURE \f1\u8722?\f0  Captures the output of a command and adds it to a file.\par
CONSISTENCY \f1\u8722?\f0  Shows the current consistency level, or sets a new consistency level.\par
COPY \f1\u8722?\f0  Copies data to and from Cassandra.\par
DESCRIBE \f1\u8722?\f0  Describes the current cluster of Cassandra and its objects.\par
EXPAND \f1\u8722?\f0  Expands the output of a query vertically.\par
EXIT \f1\u8722?\f0  Using this command, you can terminate cqlsh.\par
PAGING \f1\u8722?\f0  Enables or disables query paging.\par
SHOW \f1\u8722?\f0  Displays the details of current cqlsh session such as Cassandra version, host, or data type assumptions.\par
SOURCE \f1\u8722?\f0  Executes a file that contains CQL statements.\par
TRACING \f1\u8722?\f0  Enables or disables request tracing.\par
CQL Data Definition Commands\par
CREATE KEYSPACE \f1\u8722?\f0  Creates a KeySpace in Cassandra.\par
USE \f1\u8722?\f0  Connects to a created KeySpace.\par
ALTER KEYSPACE \f1\u8722?\f0  Changes the properties of a KeySpace.\par
DROP KEYSPACE \f1\u8722?\f0  Removes a KeySpace\par
CREATE TABLE \f1\u8722?\f0  Creates a table in a KeySpace.\par
ALTER TABLE \f1\u8722?\f0  Modifies the column properties of a table.\par
DROP TABLE \f1\u8722?\f0  Removes a table.\par
TRUNCATE \f1\u8722?\f0  Removes all the data from a table.\par
CREATE INDEX \f1\u8722?\f0  Defines a new index on a single column of a table.\par
DROP INDEX \f1\u8722?\f0  Deletes a named index.\par
CQL Data Manipulation Commands\par
INSERT \f1\u8722?\f0  Adds columns for a row in a table.\par
UPDATE \f1\u8722?\f0  Updates a column of a row.\par
DELETE \f1\u8722?\f0  Deletes data from a table.\par
BATCH \f1\u8722?\f0  Executes multiple DML statements at once.\par
CQL Clauses\par
SELECT \f1\u8722?\f0  This clause reads data from a table\par
WHERE \f1\u8722?\f0  The where clause is used along with select to read a specific data.\par
ORDERBY \f1\u8722?\f0  The orderby clause is used along with select to read a specific data in a specific order.\par
\b 3. Explain\f2  \f0 the\f2  \f0 Cassandra\f2  \f0 cluster\f2  \f0 idea\f2 .\par
\cf1\b0 Cassandra Cluster\cf0\lang16393\par
In this Cassandra tutorial, we will go through one of the main parts of the Cassandra database i.e. Cassandra Cluster. Moreover, we will see the meaning of Cluster and different layers in Cluster. This article will guide through the parts of the cluster and the builders associated with it.\cf1\par
What is Cluster?\par
\cf0 The cluster is a collection of nodes that represents a single system. A cluster in Cassandra is one of the shells in the whole Cassandra database. Many Cassandra Clusters combine together to form the database in Cassandra.\par
A Cluster is basically the outermost shell or storage unit in a database. The Cassandra Cluster contains many different layers of storage units. Each layer contains the other.\par
Node Cluster\par
Node is the second layer in a cluster. This layer basically comprises of systems or computers or storage units. Each cluster may contain many nodes or systems. These systems or nodes are connected together.\par
\par
They collectively share data through the replication in Cassandra and independently as well. The replication factor in the nodes allows the user to have a redundancy for the data stored.\par
\par
b. Keyspace\par
The keyspace is the next layer of the storage. In a node, there are many keyspaces. These keyspaces are basically the outermost storage unit in a system. They contain the main data. The data distributed according to their properties or areas.\par
Let\rquote s revise Cassandra API\par
\par
c. Column Families\par
The next layer is the column families. The keyspace is further divided into column families. These column families have different areas or headings under which the data is distributed. In a keyspace, these column families are categorized into different headings or titles.\par
\par
These titles further contain different layers of storage units. These column families can also be characterized by tables. The column families differ from the tables through their APIs.\par
\par
d. Rows\par
\par
The next layer in the database is of the Rows as according to column families. The Rows are basically the classification under which the column family is divided. These classifications, in turn, create specific distribution criteria for the entries.   \par
Let\rquote s discuss Cassandra Architecture.\par
\par
e. Column\par
This is the innermost layer in a database. The column basically is divided into different titles or headings. These headings contain the main data regarding the specific entry.\par
\par
3. Cluster Builder\par
The cluster is the main entrance for the data into the database. The driver of this belongs to com.datastax.driver.core package. Using a set of commands user can initiate the Cluster Builder. This allows the user to perform various detailed operations while building a cluster.\par
The Cassandra Cluster Builder is basically an interface that holds connections to the clusters. This is also helpful to execute CQL queries and statements.\par
Different commands and methods are used to perform various operations in Cassandra Cluster Builder.\par
Have a look at Cassandra Data Types\par
Session connect(): It allows the user to create a new session on the cluster. Apart from this it initializes the new session.\par
void close(): It allows the user to close the cluster session instance.\par
static Cluster.Builder builder(): It allows the user to create a new Cluster.Builder instance.\par
Cluster.Builder addContactPoint(): This allows the user to add a contact point a cluster.\par
Cluster build(): This command allows the user to build a cluster with the given or default contact points.\par
ResultSet execute(): This allows the user to execute a query. The query may contain a statement object or it may be a string object.\par
PreparedStatement prepare(): This allows the user to prepare a provided query. This query can be provided either in the form of a statement or a string.\par
Read Data Definition Command \endash  Cassandra Query Language\par
So, this was all about Cassandra Clustering. Hope you like our explanation.\par
4. Conclusion\par
Hence, in this Cassandra Cluster tutorial, we went through Cassandra Cluster. Moreover, we saw different layers in Cluster that are a node, keyspace, column families, rows, and column. Also, we discussed the Cluster Builder.\par
Next, we will see Cassandra quiz. The quiz will allow you to test your knowledge that you gained through these articles. Still, if any doubt, ask in the comment tab.\par
\b 4. Give an example to demonstrate the class notion.\par
\b0 Python Classes/Objects\par
Python is an object oriented programming language.\par
Almost everything in Python is an object, with its properties and methods.\par
A Class is like an object constructor, or a "blueprint" for creating objects.\par
Create a Class\par
To create a class, use the keyword class:\par
Example\par
Create a class named MyClass, with a property named x:\par
class MyClass:\par
  x = 5\par
Create Object\par
Now we can use the class named MyClass to create objects:\par
Example\par
Create an object named p1, and print the value of x:\par
p1 = MyClass()\par
print(p1.x)\par
The __init__() Function\par
The examples above are classes and objects in their simplest form, and are not really useful in real life applications.\par
To understand the meaning of classes we have to understand the built-in __init__() function.\par
All classes have a function called __init__(), which is always executed when the class is being initiated.\par
Use the __init__() function to assign values to object properties, or other operations that are necessary to do when the object is being created:\par
Example\par
Create a class named Person, use the __init__() function to assign values for name and age:\par
class Person:\par
  def __init__(self, name, age):\par
    self.name = name\par
    self.age = age\par
p1 = Person("John", 36)\par
print(p1.name)\par
print(p1.age)\par
\b\f0\lang9 5. Use an example to explain the object.\par
\b0 A python is an object-oriented programming language. Almost everything in Python is considered as an object. An object has its own properties(attributes) and behavior(methods).\par
A class is a blueprint of the objects or can be termed as object constructor for creating objects.\par
One class can have many objects and value of properties for different objects can be different.\par
Example of properties and behavior of an object\par
Let\rquote s take the example of car as an object. Its properties will include its color, company name, year of manufacture , price , mileage etc. The behavior of the car will include the functions it can perform, this will include increase speed, decrease speed, apply brakes etc. Object basically related everything with real life objects. Everything we find around us in real life has some properties and some functions.\par
Example of class and object\par
Different objects belonging to same class can have different properties. For example, Person(Human) can be treated as a class which has properties such as name, age,gender etc. Every individual can be treated as an object of the class human or Person. Each individual will have different values of the properties of class Person.Everyone will have different names, age and gender.\par
An object is also called an instance of a class. Thus, the process of creating object of a class is known as instantiation.\par
Defining class in Python\par
As the function in Python is defined using the keyword \lquote def\rquote . The keyword \lquote class\rquote  is used to define a class in Python. Since the class is a blueprint of the object, all the common attributes and methods will be declared and defined in the class. Different objects which are created from the class can access those properties and functions. Different objects can hold their own values for properties defined inside the class.\par
Creating object in Python\par
Creating object of a class is simple. The name of the class must be known and object can be created as follows \f1\u8722?\par
Object_name= class_name()\par
Example\par
class Person:\par
   name=""\par
   age=0\par
   city=""\par
   def display(self):\par
      print("Name : ",self.name)\par
   print("Age : ",self.age)\par
    print("City : ",self.city)\par
p1=Person()\par
p1.name="Rahul"\par
p1.age=20\par
p1.city="Kolkata"\par
p1.display()\par
print()\f2\lang16393 1\f1 p2=Person()\par
p2.name="Karan"\par
p2.age=22\par
p2.city="Bangalore"\par
p2.display()\par
print()\par
p1.display()\par
In the above implementation, p1=Person() is the object instantiation. p1 is the name of the object . We accessed the properties of the class through object p1 and gave them different values and later called the display function to display values of this object.Later,we do the same for second object p2 and display properties of p2.\par
At the end, we again call display() for object p1 to show that each object holds its own value of properties and those are independent of the other objects.\par
Output\par
Name : Rahul\par
Age : 20\par
City : Kolkata\par
Name : Karan\par
Age : 22\par
City : Bangalore\par
Name : Rahul\par
Age : 20\par
City : Kolkata\f0\lang9\par
}
 